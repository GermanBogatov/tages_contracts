// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb_tages_service_images

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagesServiceClient is the client API for TagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagesServiceClient interface {
	CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*CreateImageResponse, error)
	ViewAllImage(ctx context.Context, in *ViewAllImageRequest, opts ...grpc.CallOption) (*ViewAllImageResponse, error)
}

type tagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagesServiceClient(cc grpc.ClientConnInterface) TagesServiceClient {
	return &tagesServiceClient{cc}
}

func (c *tagesServiceClient) CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*CreateImageResponse, error) {
	out := new(CreateImageResponse)
	err := c.cc.Invoke(ctx, "/tages_service.images.v1.TagesService/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagesServiceClient) ViewAllImage(ctx context.Context, in *ViewAllImageRequest, opts ...grpc.CallOption) (*ViewAllImageResponse, error) {
	out := new(ViewAllImageResponse)
	err := c.cc.Invoke(ctx, "/tages_service.images.v1.TagesService/ViewAllImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagesServiceServer is the server API for TagesService service.
// All implementations must embed UnimplementedTagesServiceServer
// for forward compatibility
type TagesServiceServer interface {
	CreateImage(context.Context, *CreateImageRequest) (*CreateImageResponse, error)
	ViewAllImage(context.Context, *ViewAllImageRequest) (*ViewAllImageResponse, error)
	mustEmbedUnimplementedTagesServiceServer()
}

// UnimplementedTagesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagesServiceServer struct {
}

func (UnimplementedTagesServiceServer) CreateImage(context.Context, *CreateImageRequest) (*CreateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedTagesServiceServer) ViewAllImage(context.Context, *ViewAllImageRequest) (*ViewAllImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAllImage not implemented")
}
func (UnimplementedTagesServiceServer) mustEmbedUnimplementedTagesServiceServer() {}

// UnsafeTagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagesServiceServer will
// result in compilation errors.
type UnsafeTagesServiceServer interface {
	mustEmbedUnimplementedTagesServiceServer()
}

func RegisterTagesServiceServer(s grpc.ServiceRegistrar, srv TagesServiceServer) {
	s.RegisterService(&TagesService_ServiceDesc, srv)
}

func _TagesService_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagesServiceServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tages_service.images.v1.TagesService/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagesServiceServer).CreateImage(ctx, req.(*CreateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagesService_ViewAllImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAllImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagesServiceServer).ViewAllImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tages_service.images.v1.TagesService/ViewAllImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagesServiceServer).ViewAllImage(ctx, req.(*ViewAllImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagesService_ServiceDesc is the grpc.ServiceDesc for TagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tages_service.images.v1.TagesService",
	HandlerType: (*TagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImage",
			Handler:    _TagesService_CreateImage_Handler,
		},
		{
			MethodName: "ViewAllImage",
			Handler:    _TagesService_ViewAllImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tages_service/images/v1/service.proto",
}
