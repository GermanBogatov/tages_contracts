// @generated by protobuf-ts 2.2.2 with parameter long_type_string
// @generated from protobuf file "tages_service/images/v1/service.proto" (package "tages_service.images.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Image } from "./image";
/**
 * @generated from protobuf message tages_service.images.v1.CreateImageRequest
 */
export interface CreateImageRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: bytes image = 2;
     */
    image: Uint8Array;
}
/**
 * @generated from protobuf message tages_service.images.v1.CreateImageResponse
 */
export interface CreateImageResponse {
    /**
     * @generated from protobuf field: string done = 1;
     */
    done: string;
}
/**
 * @generated from protobuf message tages_service.images.v1.ViewAllImageRequest
 */
export interface ViewAllImageRequest {
}
/**
 * @generated from protobuf message tages_service.images.v1.ViewAllImageResponse
 */
export interface ViewAllImageResponse {
    /**
     * @generated from protobuf field: repeated tages_service.images.v1.Image images = 1;
     */
    images: Image[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateImageRequest$Type extends MessageType<CreateImageRequest> {
    constructor() {
        super("tages_service.images.v1.CreateImageRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CreateImageRequest>): CreateImageRequest {
        const message = { name: "", image: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateImageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateImageRequest): CreateImageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bytes image */ 2:
                    message.image = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateImageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bytes image = 2; */
        if (message.image.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tages_service.images.v1.CreateImageRequest
 */
export const CreateImageRequest = new CreateImageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateImageResponse$Type extends MessageType<CreateImageResponse> {
    constructor() {
        super("tages_service.images.v1.CreateImageResponse", [
            { no: 1, name: "done", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateImageResponse>): CreateImageResponse {
        const message = { done: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateImageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateImageResponse): CreateImageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string done */ 1:
                    message.done = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateImageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string done = 1; */
        if (message.done !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.done);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tages_service.images.v1.CreateImageResponse
 */
export const CreateImageResponse = new CreateImageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewAllImageRequest$Type extends MessageType<ViewAllImageRequest> {
    constructor() {
        super("tages_service.images.v1.ViewAllImageRequest", []);
    }
    create(value?: PartialMessage<ViewAllImageRequest>): ViewAllImageRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ViewAllImageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewAllImageRequest): ViewAllImageRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ViewAllImageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tages_service.images.v1.ViewAllImageRequest
 */
export const ViewAllImageRequest = new ViewAllImageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewAllImageResponse$Type extends MessageType<ViewAllImageResponse> {
    constructor() {
        super("tages_service.images.v1.ViewAllImageResponse", [
            { no: 1, name: "images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image }
        ]);
    }
    create(value?: PartialMessage<ViewAllImageResponse>): ViewAllImageResponse {
        const message = { images: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ViewAllImageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewAllImageResponse): ViewAllImageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tages_service.images.v1.Image images */ 1:
                    message.images.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ViewAllImageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tages_service.images.v1.Image images = 1; */
        for (let i = 0; i < message.images.length; i++)
            Image.internalBinaryWrite(message.images[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tages_service.images.v1.ViewAllImageResponse
 */
export const ViewAllImageResponse = new ViewAllImageResponse$Type();
/**
 * @generated ServiceType for protobuf service tages_service.images.v1.TagesService
 */
export const TagesService = new ServiceType("tages_service.images.v1.TagesService", [
    { name: "CreateImage", options: {}, I: CreateImageRequest, O: CreateImageResponse },
    { name: "ViewAllImage", options: {}, I: ViewAllImageRequest, O: ViewAllImageResponse }
]);
